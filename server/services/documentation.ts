import { storage } from "../storage";
import fs from "fs/promises";
import path from "path";

class DocumentationService {
  private docsDir = path.join(process.cwd(), 'docs');

  constructor() {
    this.ensureDocsDirectory();
  }

  private async ensureDocsDirectory() {
    try {
      await fs.access(this.docsDir);
    } catch {
      await fs.mkdir(this.docsDir, { recursive: true });
    }
  }

  async generateMarkdownFile(docId: number) {
    try {
      const doc = await storage.getDocumentation(docId);
      if (!doc) {
        throw new Error("Documentation not found");
      }

      const filename = this.generateFilename(doc.title);
      const filepath = path.join(this.docsDir, `${filename}.md`);
      
      const markdown = this.generateMarkdown(doc);
      await fs.writeFile(filepath, markdown, 'utf-8');
      
      // Update document with file path
      await storage.updateDocumentation(docId, {
        filePath: filepath
      });
      
      return filepath;
    } catch (error) {
      console.error("Markdown generation error:", error);
      throw error;
    }
  }

  private generateFilename(title: string): string {
    return title
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim();
  }

  private generateMarkdown(doc: any): string {
    const date = new Date(doc.updatedAt).toLocaleDateString();
    
    return `# ${doc.title}

**Category:** ${doc.category}  
**Author:** ${doc.author}  
**Status:** ${doc.status}  
**Last Updated:** ${date}

---

${doc.content}

---

*Generated by Wish Desk CRM Documentation System*
*File: ${doc.filePath || 'Not saved'}*
`;
  }

  async generateProcessDocumentation(processName: string, steps: string[]): Promise<string> {
    const filename = this.generateFilename(`${processName}-process`);
    const filepath = path.join(this.docsDir, `${filename}.md`);
    
    const markdown = `# ${processName} Process

**Generated:** ${new Date().toLocaleDateString()}

## Overview

This document outlines the step-by-step process for ${processName.toLowerCase()}.

## Process Steps

${steps.map((step, index) => `### Step ${index + 1}: ${step}`).join('\n\n')}

## Notes

- This is an automated process documentation
- Review and update as needed
- Contact the development team for technical issues

---

*Generated by Wish Desk CRM Documentation System*
`;

    await fs.writeFile(filepath, markdown, 'utf-8');
    
    // Store in database
    const doc = await storage.createDocumentation({
      title: `${processName} Process`,
      category: 'process-guides',
      content: steps.join('\n\n'),
      author: 'System',
      status: 'published'
    });

    await storage.updateDocumentation(doc.id, {
      filePath: filepath
    });

    return filepath;
  }

  async generateAPIDocumentation(endpoint: string, method: string, description: string, parameters: any[], responses: any[]): Promise<string> {
    const filename = this.generateFilename(`api-${endpoint.replace(/[\/]/g, '-')}`);
    const filepath = path.join(this.docsDir, `${filename}.md`);
    
    const markdown = `# API Documentation: ${endpoint}

**Method:** \`${method}\`  
**Endpoint:** \`${endpoint}\`  
**Generated:** ${new Date().toLocaleDateString()}

## Description

${description}

## Parameters

${parameters.length > 0 ? parameters.map(param => 
  `- **${param.name}** (${param.type}): ${param.description}${param.required ? ' *Required*' : ''}`
).join('\n') : 'No parameters required.'}

## Responses

${responses.map(response => 
  `### ${response.status} - ${response.description}\n\n\`\`\`json\n${JSON.stringify(response.example, null, 2)}\n\`\`\``
).join('\n\n')}

## Example Usage

\`\`\`bash
curl -X ${method} "${endpoint}" \\
  -H "Content-Type: application/json" \\
  -d '${JSON.stringify(parameters.length > 0 ? parameters.reduce((acc, param) => {
    acc[param.name] = param.example || `<${param.type}>`;
    return acc;
  }, {}) : {}, null, 2)}'
\`\`\`

---

*Generated by Wish Desk CRM Documentation System*
`;

    await fs.writeFile(filepath, markdown, 'utf-8');
    
    const doc = await storage.createDocumentation({
      title: `API: ${endpoint}`,
      category: 'api-documentation',
      content: markdown,
      author: 'System',
      status: 'published'
    });

    await storage.updateDocumentation(doc.id, {
      filePath: filepath
    });

    return filepath;
  }

  async listDocumentationFiles(): Promise<string[]> {
    try {
      const files = await fs.readdir(this.docsDir);
      return files.filter(file => file.endsWith('.md'));
    } catch (error) {
      console.error("Error listing documentation files:", error);
      return [];
    }
  }

  async getDocumentationContent(filename: string): Promise<string> {
    try {
      const filepath = path.join(this.docsDir, filename);
      return await fs.readFile(filepath, 'utf-8');
    } catch (error) {
      console.error("Error reading documentation file:", error);
      throw new Error("Documentation file not found");
    }
  }
}

export const documentationService = new DocumentationService();
